{"version":3,"sources":["../../src/addon/axifications/pages/settings/settings.module.ts","../../src/addon/axifications/pages/settings/settings.ts"],"names":[],"mappings":"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","file":"118.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AddonAxificationsSettingsPage } from './settings';\r\nimport { CoreComponentsModule } from '@components/components.module';\r\nimport { CoreDirectivesModule } from '@directives/directives.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonAxificationsSettingsPage,\r\n    ],\r\n    imports: [\r\n        CoreComponentsModule,\r\n        CoreDirectivesModule,\r\n        IonicPageModule.forChild(AddonAxificationsSettingsPage),\r\n        TranslateModule.forChild()\r\n    ],\r\n})\r\nexport class AddonAxificationsSettingsPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/axifications/pages/settings/settings.module.ts","// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, Optional } from '@angular/core';\r\nimport { IonicPage, NavController } from 'ionic-angular';\r\nimport { AddonAxificationsProvider } from '../../providers/axifications';\r\nimport { CoreUserProvider } from '@core/user/providers/user';\r\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\r\nimport { CoreSettingsHelper } from '@core/settings/providers/helper';\r\nimport { AddonMessageOutputDelegate, AddonMessageOutputHandlerData } from '@addon/messageoutput/providers/delegate';\r\nimport { CoreLocalNotificationsProvider } from '@providers/local-notifications';\r\nimport { CoreConfigProvider } from '@providers/config';\r\nimport { CoreAppProvider } from '@providers/app';\r\nimport { CoreConstants } from '@core/constants';\r\nimport { CoreEventsProvider } from '@providers/events';\r\nimport { CoreSitesProvider } from '@providers/sites';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\n\r\n/**\r\n * Page that displays axifications settings.\r\n */\r\n@IonicPage({ segment: 'addon-axifications-settings' })\r\n@Component({\r\n    selector: 'page-addon-axifications-settings',\r\n    templateUrl: 'settings.html',\r\n})\r\nexport class AddonAxificationsSettingsPage implements OnDestroy {\r\n    protected updateTimeout: any;\r\n\r\n    components: any[];\r\n    preferences: any;\r\n    preferencesLoaded: boolean;\r\n    currentProcessor: any;\r\n    notifPrefsEnabled: boolean;\r\n    canChangeSound: boolean;\r\n    axificationSound: boolean;\r\n    processorHandlers = [];\r\n\r\n    constructor(private axificationsProvider: AddonAxificationsProvider, private domUtils: CoreDomUtilsProvider,\r\n            private settingsHelper: CoreSettingsHelper, private userProvider: CoreUserProvider,\r\n            private navCtrl: NavController, private messageOutputDelegate: AddonMessageOutputDelegate,\r\n            appProvider: CoreAppProvider, private configProvider: CoreConfigProvider, private eventsProvider: CoreEventsProvider,\r\n            private localNotificationsProvider: CoreLocalNotificationsProvider, private sitesProvider: CoreSitesProvider,\r\n            @Optional() private svComponent: CoreSplitViewComponent) {\r\n\r\n        this.notifPrefsEnabled = axificationsProvider.isAxificationPreferencesEnabled();\r\n        this.canChangeSound = localNotificationsProvider.isAvailable() && !appProvider.isDesktop();\r\n        if (this.canChangeSound) {\r\n            configProvider.get(CoreConstants.SETTINGS_AXIFICATIONS_SOUND, true).then((enabled) => {\r\n                this.axificationSound = !!enabled;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * View loaded.\r\n     */\r\n    ionViewDidLoad(): void {\r\n        if (this.notifPrefsEnabled) {\r\n            this.fetchPreferences();\r\n        } else {\r\n            this.preferencesLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches preference data.\r\n     *\r\n     * @return {Promise<any>} Resolved when done.\r\n     */\r\n    protected fetchPreferences(): Promise<any> {\r\n        return this.axificationsProvider.getAxificationPreferences().then((preferences) => {\r\n            if (!this.currentProcessor) {\r\n                // Initialize current processor. Load \"Mobile\" (airnotifier) if available.\r\n                this.currentProcessor = this.settingsHelper.getProcessor(preferences.processors, 'airnotifier');\r\n            }\r\n\r\n            if (!this.currentProcessor) {\r\n                // Shouldn't happen.\r\n                return Promise.reject('No processor found');\r\n            }\r\n\r\n            preferences.disableall = !!preferences.disableall; // Convert to boolean.\r\n            this.preferences = preferences;\r\n            this.loadProcessor(this.currentProcessor);\r\n\r\n            // Get display data of message output handlers (thery are displayed in the context menu),\r\n            this.processorHandlers = [];\r\n            if (preferences.processors) {\r\n                preferences.processors.forEach((processor) => {\r\n                    processor.supported = this.messageOutputDelegate.hasHandler(processor.name, true);\r\n                    if (processor.hassettings && processor.supported) {\r\n                        this.processorHandlers.push(this.messageOutputDelegate.getDisplayData(processor));\r\n                    }\r\n                });\r\n            }\r\n        }).catch((message) => {\r\n            this.domUtils.showErrorModal(message);\r\n        }).finally(() => {\r\n            this.preferencesLoaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load a processor.\r\n     *\r\n     * @param {any} processor Processor object.\r\n     */\r\n    protected loadProcessor(processor: any): void {\r\n        if (!processor) {\r\n            return;\r\n        }\r\n        this.currentProcessor = processor;\r\n        this.components = this.settingsHelper.getProcessorComponents(processor.name, this.preferences.components);\r\n    }\r\n\r\n    /**\r\n     * Update preferences after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n     protected updatePreferencesAfterDelay(): void {\r\n        // Cancel pending updates.\r\n        clearTimeout(this.updateTimeout);\r\n\r\n        this.updateTimeout = setTimeout(() => {\r\n            this.updateTimeout = null;\r\n            this.updatePreferences();\r\n        }, 5000);\r\n    }\r\n\r\n    /**\r\n     * Update preferences. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n    protected updatePreferences(): void {\r\n        this.axificationsProvider.invalidateAxificationPreferences().finally(() => {\r\n            this.axificationsProvider.getAxificationPreferences();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The selected processor was changed.\r\n     *\r\n     * @param {string} name Name of the selected processor.\r\n     */\r\n    changeProcessor(name: string): void {\r\n        this.preferences.processors.forEach((processor) => {\r\n            if (processor.name == name) {\r\n                this.loadProcessor(processor);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh the list of preferences.\r\n     *\r\n     * @param {any} [refresher] Refresher.\r\n     */\r\n    refreshPreferences(refresher?: any): void {\r\n        this.axificationsProvider.invalidateAxificationPreferences().finally(() => {\r\n            this.fetchPreferences().finally(() => {\r\n                refresher && refresher.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open extra preferences.\r\n     *\r\n     * @param {AddonMessageOutputHandlerData} handlerData\r\n     */\r\n    openExtraPreferences(handlerData: AddonMessageOutputHandlerData): void {\r\n        // Decide which navCtrl to use. If this page is inside a split view, use the split view's master nav.\r\n        const navCtrl = this.svComponent ? this.svComponent.getMasterNav() : this.navCtrl;\r\n        navCtrl.push(handlerData.page, handlerData.pageParams);\r\n    }\r\n\r\n    /**\r\n     * Change the value of a certain preference.\r\n     *\r\n     * @param {any} axification Axification object.\r\n     * @param {string} state State name, ['loggedin', 'loggedoff'].\r\n     */\r\n    changePreference(axification: any, state: string): void {\r\n        const processorState = axification.currentProcessor[state];\r\n        const preferenceName = axification.preferencekey + '_' + processorState.name;\r\n        let value;\r\n\r\n        axification.processors.forEach((processor) => {\r\n            if (processor[state].checked) {\r\n                if (!value) {\r\n                    value = processor.name;\r\n                } else {\r\n                    value += ',' + processor.name;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!value) {\r\n            value = 'none';\r\n        }\r\n\r\n        processorState.updating = true;\r\n        this.userProvider.updateUserPreference(preferenceName, value).then(() => {\r\n            // Update the preferences since they were modified.\r\n            this.updatePreferencesAfterDelay();\r\n        }).catch((message) => {\r\n            // Show error and revert change.\r\n            this.domUtils.showErrorModal(message);\r\n            axification.currentProcessor[state].checked = !axification.currentProcessor[state].checked;\r\n        }).finally(() => {\r\n            processorState.updating = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable all axifications changed.\r\n     */\r\n    disableAll(disable: boolean): void {\r\n        const modal = this.domUtils.showModalLoading('core.sending', true);\r\n        this.userProvider.updateUserPreferences([], disable).then(() => {\r\n            // Update the preferences since they were modified.\r\n            this.updatePreferencesAfterDelay();\r\n        }).catch((message) => {\r\n            // Show error and revert change.\r\n            this.domUtils.showErrorModal(message);\r\n            this.preferences.disableall = !this.preferences.disableall;\r\n        }).finally(() => {\r\n            modal.dismiss();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change the axification sound setting.\r\n     *\r\n     * @param {enabled} enabled True to enable the axification sound, false to disable it.\r\n     */\r\n    changeAxificationSound(enabled: boolean): void {\r\n        this.configProvider.set(CoreConstants.SETTINGS_NOTIFICATION_SOUND, enabled ? 1 : 0).finally(() => {\r\n            const siteId = this.sitesProvider.getCurrentSiteId();\r\n            this.eventsProvider.trigger(CoreEventsProvider.NOTIFICATION_SOUND_CHANGED, {enabled}, siteId);\r\n            this.localNotificationsProvider.rescheduleAll();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        // If there is a pending action to update preferences, execute it right now.\r\n        if (this.updateTimeout) {\r\n            clearTimeout(this.updateTimeout);\r\n            this.updatePreferences();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/axifications/pages/settings/settings.ts"],"sourceRoot":""}